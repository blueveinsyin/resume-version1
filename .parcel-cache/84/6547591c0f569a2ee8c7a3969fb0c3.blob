let $16b5ad875ae907e2f7f79e7b8fe116cc$var$html = document.querySelector('#html');
let $16b5ad875ae907e2f7f79e7b8fe116cc$var$style = document.querySelector('#style');
let $16b5ad875ae907e2f7f79e7b8fe116cc$var$string = `\n/*你好，我叫小钦\n*接下来我演示一下我的前端功底\n*首先我要准备一个div\n*/\n#div1{\n    border: 1px solid red;\n    width:200px;\n    height:200px;\n}\n/*接下来我把div变成一个八卦图\n*注意看好了\n*首先，把div变成一个圆\n*/\n#div1{\n    border-radius:50%;\n    box-shadow:0 0 3px rgba(0,0,0,0.5);\n    border:none;\n}\n/*八卦是阴阳形成\n*一黑一百\n*/\n#div1{\n    background:linear-gradient(90deg,rgba(255,255,255,1) 0%, rgba(255,255,255,1) 50%, rgba(0,0,0,1) 50%, rgba(0,0,0,1) 100%);\n}\n/* 加两个球 */\n#div1::before{\n    width:100px;\n    height:100px;\n    top:0;\n    left:50%;\n    transform:translateX(-50%);\n    background:#000;\n    border-radius:50%;\n    background:radial-gradient(circle,rgba(255,255,255,1) 0%, rgba(255,255,255,1) 25%, rgba(0,0,0,1) 25%, rgba(0,0,0,1) 100%);\n}\n\n#div1::after{\n    width:100px;\n    height:100px;\n    bottom:0;\n    left:50%;\n    transform:translateX(-50%);\n    background:#fff;\n    border-radius:50%;\n    background:radial-gradient(circle,rgba(0,0,0,1) 0%, rgba(0,0,0,1) 25%, rgba(255,255,255,1) 25%, rgba(255,255,255,1) 100%, rgba(0,0,0,1) 100%);\n}\n`;
// string.replace('\n','<br>')只会把第一个回车变<br>
// 因此我们需要用正则表达式，但是这个方法也有错，因此要重写
// string = string.replace(/\n/g,"<br>")
// 新的解决办法是在下面的代码里判断回车
let $16b5ad875ae907e2f7f79e7b8fe116cc$var$string2 = '';
let $16b5ad875ae907e2f7f79e7b8fe116cc$var$n = 0;
let $16b5ad875ae907e2f7f79e7b8fe116cc$var$step = ()=>{
    // 用setTimeout模拟setInterval，这样做的好处就是可以随时停止
    setTimeout(()=>{
        if ($16b5ad875ae907e2f7f79e7b8fe116cc$var$string[$16b5ad875ae907e2f7f79e7b8fe116cc$var$n] === '\n') $16b5ad875ae907e2f7f79e7b8fe116cc$var$string2 += '<br>';
        else if ($16b5ad875ae907e2f7f79e7b8fe116cc$var$string[$16b5ad875ae907e2f7f79e7b8fe116cc$var$n] === ' ') $16b5ad875ae907e2f7f79e7b8fe116cc$var$string2 += '&nbsp;';
        else $16b5ad875ae907e2f7f79e7b8fe116cc$var$string2 = $16b5ad875ae907e2f7f79e7b8fe116cc$var$string2 + $16b5ad875ae907e2f7f79e7b8fe116cc$var$string[$16b5ad875ae907e2f7f79e7b8fe116cc$var$n];
        $16b5ad875ae907e2f7f79e7b8fe116cc$var$html.innerHTML = $16b5ad875ae907e2f7f79e7b8fe116cc$var$string2;
        $16b5ad875ae907e2f7f79e7b8fe116cc$var$style.innerHTML = $16b5ad875ae907e2f7f79e7b8fe116cc$var$string.substring(0, $16b5ad875ae907e2f7f79e7b8fe116cc$var$n);
        window.scrollTo(0, 99999);
        $16b5ad875ae907e2f7f79e7b8fe116cc$var$html.scrollTo(0, 99999);
        if ($16b5ad875ae907e2f7f79e7b8fe116cc$var$n < $16b5ad875ae907e2f7f79e7b8fe116cc$var$string.length - 1) {
            $16b5ad875ae907e2f7f79e7b8fe116cc$var$n = $16b5ad875ae907e2f7f79e7b8fe116cc$var$n + 1;
            $16b5ad875ae907e2f7f79e7b8fe116cc$var$step();
        }
    }, 0);
};
$16b5ad875ae907e2f7f79e7b8fe116cc$var$step();
